rename_files("qli", "qli_values")
cars_mod <- lm(dist ~ speed, cars)
cars_mod$fitted.values
document()
document()
document()
document()
check()
use_r("qli")
use_package("ggplot2")
cars_mod
qli_values(cars_mod, predictor = "speed")
qli_df_cars <- qli_values(cars_mod, predictor = "speed")
qli_df_cars
View(qli_df_cars)
ggplot2::ggplot() +
ggplot2::geom_point(x = cars_mod$fitted.values, y = cars_mod$residuals)
ggplot2::ggplot() +
ggplot2::geom_point(aes(x = cars_mod$fitted.values, y = cars_mod$residuals))
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = cars_mod$fitted.values, y = cars_mod$residuals))
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = cars_mod$fitted.values, y = cars_mod$residuals))
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = cars_mod$fitted.values, y = cars_mod$residuals)) +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_smooth(se = FALSE, data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(se = FALSE, data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(se = FALSE, data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(se = FALSE, data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
)
qli_df_cars
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
labs(z = qli_df_cars[["predictor_name"]][1])
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
ggplot2::labs(z = qli_df_cars[["predictor_name"]][1])
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
ggplot2::labs(x = qli_df_cars[["predictor_name"]][1])
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
ggplot2::labs(x = qli_df_cars[["predictor_name"]][1], y = "Residuals")
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
ggplot2::labs(x = qli_df_cars[["predictor_name"]][1], y = "residuals")
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals))) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = "red") +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = "red") +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = "red", alpha = 0.25
) +
ggplot2::labs(x = qli_df_cars[["predictor_name"]][1], y = "residuals") +
ggplot2::theme_light()
plot_args = list(interval_fill_col = "#1887ac", interval_outline_col = "#1887ac", point_col = "black")
plot_args$interval_outline_col
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x = z(cars_mod$fitted.values), y = z(cars_mod$residuals)), colour = plot_args$point_col) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_upper_y_lowess), colour = plot_args$interval_outline_col) +
ggplot2::geom_line(data = qli_df_cars, ggplot2::aes(x = x, y = q_lower_y_lowess), colour = plot_args$interval_outline_col) +
ggplot2::geom_ribbon(data = qli_df_cars,
ggplot2::aes(ymin = q_lower_y_lowess, ymax = q_upper_y_lowess, x = x, y = NULL),
fill = plot_args$interval_fill_col, alpha = 0.25
) +
ggplot2::labs(x = qli_df_cars[["predictor_name"]][1], y = "residuals") +
ggplot2::theme_light()
library(devtools)
document()
check()
check()
check()
check()
check()
check()
?qli
cars_mod <- lm(dist ~ speed, data = cars)
qli(mod = cars_mod, predictor = "speed")
cars_mod <- lm(dist ~ speed, data = cars)
qli(mod = cars_mod, predictor = "speed", plot = TRUE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "fitted", plot = TRUE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE, standardise = FALSE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100, sd = 10)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE, standardise = FALSE)
document()
check()
load_all()
x <- rnorm(100)
y <- 0.3 * x + rnorm(100, sd = 10)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE, standardise = FALSE)
x <- rnorm(100)
y <- 0.3 * x + rnorm(100, sd = 10)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE, standardise = FALSE)
x <- rnorm(100, 20)
y <- 0.3 * x + rnorm(100, sd = 10)
test_mod <- lm(y~x)
qli(mod = test_mod, predictor = "x", plot = TRUE, standardise = FALSE)
build_readme()
cars_mod <- lm(dist ~ speed, data = cars)
qli(mod = cars_mod)
cars_mod <- lm(dist ~ speed, data = cars)
qli(mod = cars_mod)
qli(mod = cars_mod)
qli(mod = cars_mod, predictor = "speed")
qli(mod = cars_mod, plot = TRUE)
qli(mod = cars_mod, predictor = "speed", plot = TRUE)
qli(mod = cars_mod)
iris
qli(mod = cars_mod, predictor = "speed")
qli(mod = cars_mod, predictor = "speed")
qli(mod = cars_mod, predictor = "speed", plot = TRUE)
qli(mod = cars_mod, predictor = "speed", plot = TRUE)$qli_plot
build_readme()
build_readme()
build_readme()
build_readme()
usethis::use_r("creativity_data_load")
dt_df <- readxl::read_excel("data_raw/meier_et_al_2020_Creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
dt_df <- readxl::read_excel("Creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
dt_df <- readxl::read_excel("data_raw/Creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
dt_df
saveRDS(dt_df, "data/creativity_data.rds")
creativity_data <- readRDS("data/creativity_data.rds")
usethis::use_data(creativity_data, overwrite = TRUE)
creativity_data <- readxl::read_excel("data-raw/creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
creativity_data
usethis::use_data(creativity_data, internal = TRUE)
devtools::load_all()
check()
devtools::check()
devtools::install()
cretivity_data
library(qli)
cretivity_data
usethis::use_data(creativity_data)
creativity_data <- readxl::read_excel("data-raw/creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
usethis::use_data(creativity_data)
check()
devtools::check()
usethis::use_r("creativity_data")
View(creativity_data)
check()
devtools::check()
devtools::install()
qli::creativity_data
ubi_data <- read.csv("data.raw/ubi_data.csv")
ubi_data <- read.csv("data-raw/ubi_data.csv")
ubi_data <- read.csv("data-raw/ubi_data.csv")
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d <- read.csv("data-raw/ubi_data.csv")
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d$delta.shirking=d$shirking_3-d$shirking_2
d$delta.unfairrich=d$unfairrich_3-d$unfairrich_2
d$delta.unfairdesert=d$unfairdesert_3-d$unfairdesert_2
d$delta.irresponsibility=d$irrespnsibility_3-d$irrespnsibility_2
d$delta.value=d$value_3-d$value_2
d$delta.efficiency=d$efficiency_3-d$efficiency_2
d$delta.expense = d$expense_3 - d$expense_2
d$delta.stress = d$stress_3 - d$stress_2
d$delta.cheat = d$cheat_3 - d$cheat_2
d$predicted.pandemic.delta=
summary(baseline.unst.model)$coefficients[2, 1]* d$delta.shirking +
summary(baseline.unst.model)$coefficients[3, 1]* d$delta.unfairrich +
summary(baseline.unst.model)$coefficients[4, 1]* d$delta.unfairdesert +
summary(baseline.unst.model)$coefficients[5, 1]* d$delta.irresponsibility +
summary(baseline.unst.model)$coefficients[6, 1]* d$delta.value +
summary(baseline.unst.model)$coefficients[7, 1]* d$delta.efficiency +
summary(baseline.unst.model)$coefficients[8, 1]* d$delta.expense +
summary(baseline.unst.model)$coefficients[9, 1]* d$delta.stress +
summary(baseline.unst.model)$coefficients[10, 1]* d$delta.cheat
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d$delta.shirking=d$shirking_3-d$shirking_2
d$delta.unfairrich=d$unfairrich_3-d$unfairrich_2
d$delta.unfairdesert=d$unfairdesert_3-d$unfairdesert_2
d$delta.irresponsibility=d$irrespnsibility_3-d$irrespnsibility_2
d$delta.value=d$value_3-d$value_2
d$delta.efficiency=d$efficiency_3-d$efficiency_2
d$delta.expense = d$expense_3 - d$expense_2
d$delta.stress = d$stress_3 - d$stress_2
d$delta.cheat = d$cheat_3 - d$cheat_2
#not this:
baseline.unst.model=lm(ubinormal_1~ shirking_2 +
unfairrich_2 +
unfairdesert_2 +
irrespnsibility_2 +
value_2 +
efficiency_2 +
expense_2 +
stress_2 +
cheat_2, data=d)
predicted.ubi.pandemic =
summary(baseline.unst.model)$coefficients[2, 1]* mean(d$delta.shirking, na.rm=T) +
summary(baseline.unst.model)$coefficients[3, 1]* mean(d$delta.unfairrich, na.rm=T) +
summary(baseline.unst.model)$coefficients[4, 1]* mean(d$delta.unfairdesert, na.rm=T) +
summary(baseline.unst.model)$coefficients[5, 1]* mean(d$delta.irresponsibility, na.rm=T) + +
summary(baseline.unst.model)$coefficients[6, 1]* mean(d$delta.value, na.rm=T) +
summary(baseline.unst.model)$coefficients[7, 1]* mean(d$delta.efficiency, na.rm=T) +
summary(baseline.unst.model)$coefficients[8, 1]* mean(d$delta.expense, na.rm=T) +
summary(baseline.unst.model)$coefficients[9, 1]* mean(d$delta.stress, na.rm=T) +
summary(baseline.unst.model)$coefficients[10, 1]* mean(d$delta.cheat, na.rm=T)
# Compare this to the observed mean shift
mean(d$delta.ubi)
predicted.ubi.pandemic
# Now predict individual-level shift
d$predicted.pandemic.delta=
summary(baseline.unst.model)$coefficients[2, 1]* d$delta.shirking +
summary(baseline.unst.model)$coefficients[3, 1]* d$delta.unfairrich +
summary(baseline.unst.model)$coefficients[4, 1]* d$delta.unfairdesert +
summary(baseline.unst.model)$coefficients[5, 1]* d$delta.irresponsibility +
summary(baseline.unst.model)$coefficients[6, 1]* d$delta.value +
summary(baseline.unst.model)$coefficients[7, 1]* d$delta.efficiency +
summary(baseline.unst.model)$coefficients[8, 1]* d$delta.expense +
summary(baseline.unst.model)$coefficients[9, 1]* d$delta.stress +
summary(baseline.unst.model)$coefficients[10, 1]* d$delta.cheat
d %>%
lm(z(delta.ubi)~z(predicted.pandemic.delta)*z(ubinormal_1), data=.)
d |>
lm(z(delta.ubi)~z(predicted.pandemic.delta)*z(ubinormal_1), data=_)
d |>
lm((delta.ubi)~(predicted.pandemic.delta)*(ubinormal_1), data=_)
ubi_data <- d
d <- read.csv("data-raw/ubi_data.csv")
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d$delta.shirking=d$shirking_3-d$shirking_2
d$delta.unfairrich=d$unfairrich_3-d$unfairrich_2
d$delta.unfairdesert=d$unfairdesert_3-d$unfairdesert_2
d$delta.irresponsibility=d$irrespnsibility_3-d$irrespnsibility_2
d$delta.value=d$value_3-d$value_2
d$delta.efficiency=d$efficiency_3-d$efficiency_2
d$delta.expense = d$expense_3 - d$expense_2
d$delta.stress = d$stress_3 - d$stress_2
d$delta.cheat = d$cheat_3 - d$cheat_2
#not this:
baseline.unst.model=lm(ubinormal_1~ shirking_2 +
unfairrich_2 +
unfairdesert_2 +
irrespnsibility_2 +
value_2 +
efficiency_2 +
expense_2 +
stress_2 +
cheat_2, data=d)
predicted.ubi.pandemic =
summary(baseline.unst.model)$coefficients[2, 1]* mean(d$delta.shirking, na.rm=T) +
summary(baseline.unst.model)$coefficients[3, 1]* mean(d$delta.unfairrich, na.rm=T) +
summary(baseline.unst.model)$coefficients[4, 1]* mean(d$delta.unfairdesert, na.rm=T) +
summary(baseline.unst.model)$coefficients[5, 1]* mean(d$delta.irresponsibility, na.rm=T) + +
summary(baseline.unst.model)$coefficients[6, 1]* mean(d$delta.value, na.rm=T) +
summary(baseline.unst.model)$coefficients[7, 1]* mean(d$delta.efficiency, na.rm=T) +
summary(baseline.unst.model)$coefficients[8, 1]* mean(d$delta.expense, na.rm=T) +
summary(baseline.unst.model)$coefficients[9, 1]* mean(d$delta.stress, na.rm=T) +
summary(baseline.unst.model)$coefficients[10, 1]* mean(d$delta.cheat, na.rm=T)
# Compare this to the observed mean shift
mean(d$delta.ubi)
predicted.ubi.pandemic
# Now predict individual-level shift
d$predicted.pandemic.delta=
summary(baseline.unst.model)$coefficients[2, 1]* d$delta.shirking +
summary(baseline.unst.model)$coefficients[3, 1]* d$delta.unfairrich +
summary(baseline.unst.model)$coefficients[4, 1]* d$delta.unfairdesert +
summary(baseline.unst.model)$coefficients[5, 1]* d$delta.irresponsibility +
summary(baseline.unst.model)$coefficients[6, 1]* d$delta.value +
summary(baseline.unst.model)$coefficients[7, 1]* d$delta.efficiency +
summary(baseline.unst.model)$coefficients[8, 1]* d$delta.expense +
summary(baseline.unst.model)$coefficients[9, 1]* d$delta.stress +
summary(baseline.unst.model)$coefficients[10, 1]* d$delta.cheat
ubi_data <- d
usethis::use_data(ubi_data)
usethis::use_r("ubi_data")
# Creativity data
creativity_data <- readxl::read_excel("data-raw/creativity_data.xlsx") |>
dplyr::transmute(
divergent_thinking = Fluency,
relaxation = AUCi_RSA_36,
creativity = as.numeric(CAQ_score)
) |>
tidyr::drop_na()
usethis::use_data(creativity_data)
d <- read.csv("data-raw/ubi_data.csv")
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d$delta.shirking=d$shirking_3-d$shirking_2
d$delta.unfairrich=d$unfairrich_3-d$unfairrich_2
d$delta.unfairdesert=d$unfairdesert_3-d$unfairdesert_2
d$delta.irresponsibility=d$irrespnsibility_3-d$irrespnsibility_2
d$delta.value=d$value_3-d$value_2
d$delta.efficiency=d$efficiency_3-d$efficiency_2
d$delta.expense = d$expense_3 - d$expense_2
d$delta.stress = d$stress_3 - d$stress_2
d$delta.cheat = d$cheat_3 - d$cheat_2
#not this:
baseline.unst.model=lm(ubinormal_1~ shirking_2 +
unfairrich_2 +
unfairdesert_2 +
irrespnsibility_2 +
value_2 +
efficiency_2 +
expense_2 +
stress_2 +
cheat_2, data=d)
predicted.ubi.pandemic =
summary(baseline.unst.model)$coefficients[2, 1]* mean(d$delta.shirking, na.rm=T) +
summary(baseline.unst.model)$coefficients[3, 1]* mean(d$delta.unfairrich, na.rm=T) +
summary(baseline.unst.model)$coefficients[4, 1]* mean(d$delta.unfairdesert, na.rm=T) +
summary(baseline.unst.model)$coefficients[5, 1]* mean(d$delta.irresponsibility, na.rm=T) + +
summary(baseline.unst.model)$coefficients[6, 1]* mean(d$delta.value, na.rm=T) +
summary(baseline.unst.model)$coefficients[7, 1]* mean(d$delta.efficiency, na.rm=T) +
summary(baseline.unst.model)$coefficients[8, 1]* mean(d$delta.expense, na.rm=T) +
summary(baseline.unst.model)$coefficients[9, 1]* mean(d$delta.stress, na.rm=T) +
summary(baseline.unst.model)$coefficients[10, 1]* mean(d$delta.cheat, na.rm=T)
# Compare this to the observed mean shift
mean(d$delta.ubi)
predicted.ubi.pandemic
# Now predict individual-level shift
d$predicted.pandemic.delta=
summary(baseline.unst.model)$coefficients[2, 1]* d$delta.shirking +
summary(baseline.unst.model)$coefficients[3, 1]* d$delta.unfairrich +
summary(baseline.unst.model)$coefficients[4, 1]* d$delta.unfairdesert +
summary(baseline.unst.model)$coefficients[5, 1]* d$delta.irresponsibility +
summary(baseline.unst.model)$coefficients[6, 1]* d$delta.value +
summary(baseline.unst.model)$coefficients[7, 1]* d$delta.efficiency +
summary(baseline.unst.model)$coefficients[8, 1]* d$delta.expense +
summary(baseline.unst.model)$coefficients[9, 1]* d$delta.stress +
summary(baseline.unst.model)$coefficients[10, 1]* d$delta.cheat
ubi_data <- d |>
dplyr::transmute(
observed_shift = delta.ubi, # actual shift in UBI support
predicted_shift = predicted.pandemic.delta, # shift predicted based on importance ratings
normal_times_support = ubinormal_1
)
u00823_mod_z_2 <- d %>%
lm(z(delta.ubi)~z(predicted.pandemic.delta)*z(ubinormal_1), data=.)
usethis::use_data(ubi_data, overwrite = TRUE)
ubi_data
check()
devtools::check()
citr:::insert_citation()
d <- read.csv("data-raw/ubi_data.csv")
# code from https://osf.io/eyq92/
d$delta.ubi=d$ubipandem_1 - d$ubinormal_1
d$delta.shirking=d$shirking_3-d$shirking_2
d$delta.unfairrich=d$unfairrich_3-d$unfairrich_2
d$delta.unfairdesert=d$unfairdesert_3-d$unfairdesert_2
d$delta.irresponsibility=d$irrespnsibility_3-d$irrespnsibility_2
d$delta.value=d$value_3-d$value_2
d$delta.efficiency=d$efficiency_3-d$efficiency_2
d$delta.expense = d$expense_3 - d$expense_2
d$delta.stress = d$stress_3 - d$stress_2
d$delta.cheat = d$cheat_3 - d$cheat_2
#not this:
baseline.unst.model=lm(ubinormal_1~ shirking_2 +
unfairrich_2 +
unfairdesert_2 +
irrespnsibility_2 +
value_2 +
efficiency_2 +
expense_2 +
stress_2 +
cheat_2, data=d)
predicted.ubi.pandemic =
summary(baseline.unst.model)$coefficients[2, 1]* mean(d$delta.shirking, na.rm=T) +
summary(baseline.unst.model)$coefficients[3, 1]* mean(d$delta.unfairrich, na.rm=T) +
summary(baseline.unst.model)$coefficients[4, 1]* mean(d$delta.unfairdesert, na.rm=T) +
summary(baseline.unst.model)$coefficients[5, 1]* mean(d$delta.irresponsibility, na.rm=T) + +
summary(baseline.unst.model)$coefficients[6, 1]* mean(d$delta.value, na.rm=T) +
summary(baseline.unst.model)$coefficients[7, 1]* mean(d$delta.efficiency, na.rm=T) +
summary(baseline.unst.model)$coefficients[8, 1]* mean(d$delta.expense, na.rm=T) +
summary(baseline.unst.model)$coefficients[9, 1]* mean(d$delta.stress, na.rm=T) +
summary(baseline.unst.model)$coefficients[10, 1]* mean(d$delta.cheat, na.rm=T)
# Compare this to the observed mean shift
mean(d$delta.ubi)
predicted.ubi.pandemic
# Now predict individual-level shift
d$predicted.pandemic.delta=
summary(baseline.unst.model)$coefficients[2, 1]* d$delta.shirking +
summary(baseline.unst.model)$coefficients[3, 1]* d$delta.unfairrich +
summary(baseline.unst.model)$coefficients[4, 1]* d$delta.unfairdesert +
summary(baseline.unst.model)$coefficients[5, 1]* d$delta.irresponsibility +
summary(baseline.unst.model)$coefficients[6, 1]* d$delta.value +
summary(baseline.unst.model)$coefficients[7, 1]* d$delta.efficiency +
summary(baseline.unst.model)$coefficients[8, 1]* d$delta.expense +
summary(baseline.unst.model)$coefficients[9, 1]* d$delta.stress +
summary(baseline.unst.model)$coefficients[10, 1]* d$delta.cheat
ubi_data <- d |>
dplyr::transmute(
observed_shift = delta.ubi, # actual shift in UBI support
expected_shift = predicted.pandemic.delta, # shift predicted based on importance ratings
normal_times_support = ubinormal_1
)
usethis::use_data(ubi_data, overwrite = TRUE)
devtools::check()
devtools::install()
devtools::install()
qli::ubi_data
